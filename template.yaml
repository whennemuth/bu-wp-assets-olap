AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  Create a s3 bucket and olap whose lambda function serves as an s3 proxy/filter mechanism where custom logic can be applied against requests for s3 objects.

Parameters:

  EnableCloudWatchMonitoring:
    Type: String
    Description: >
      Flag to enable CloudWatch request metrics from S3 Object Lambda. This also creates CloudWatch alarms
      to monitor the request metrics.
    Default: false
    AllowedValues: [ true, false ]

  OLAP:
    Type: String
    Description: >
      Just create the s3 bucket. Skip lambda and access point creatioon.
    Default: true
    AllowedValues: [ true, false ]

  CreateBucketUser:
    Type: String
    Description: >
      Indicates whether or not to create an iam user that will have access to the bucket and all its access points.
    Default: false
    AllowedValues: [ true, false ]

  CreateEC2:
    Type: String
    Description: Indicate if an ec2 instance is to be created to act as an apache proxying server to the olap
    Default: false
    AllowedValues: [ true, false ]

  Shibboleth:
    Type: String
    Description: >
      Indicates if the object lambda will require that requests for s3 content include header or token info that proves a successful BU login.
    Default: false
    AllowedValues: [ true, false ]

  HostName:
    Type: String
    Description: >
      An apache client that wants to proxy to the olap will have a virtual host configuration with a ServerName set to this domain name or ip address.
      If the ec2 instance is being created, then its elastic IP will substitute for this value. If not, then you are running an apache host locally 
      and have set this value as a localhost mapping in your hosts file.
    Default: empty

  LambdaFunctionPayload:
    Type: String
    Default: ""
    Description: An optional static payload that provides supplemental data to the Lambda function used to transform objects.


Conditions:
  BucketOnly:
    !Equals [!Ref OLAP, false]
  IncludeLambda:
    !Not [Condition: BucketOnly]
  IncludeEC2:
    !And [!Equals [!Ref CreateEC2, true], Condition: IncludeLambda]
  IncludeBucketUser:
    !Or [!Equals [!Ref CreateBucketUser, true], Condition: IncludeEC2]
  DefaultHost:
    !Equals [!Ref HostName, empty]
  CustomHostName:
    !Not [Condition: DefaultHost]
  IncludeEIP:
    !And [Condition: IncludeEC2, Condition: DefaultHost, Condition: IncludeLambda]

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-assets
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-assets
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    DeletionPolicy: Delete

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: '*'
            Effect: Allow
            Resource:
            - !GetAtt Bucket.Arn
            - !Sub
              - '${bucketARN}/*'
              - bucketARN: !GetAtt Bucket.Arn
            Principal:
              AWS: '*'
            Condition:
              StringEquals:
                's3:DataAccessPointAccount': !Sub ${AWS::AccountId}

  # Using an EIP for the public addressing of the ec2 instead of simply using the PublicDnsName of the ec2 to avoid
  # a circular reference between LambdaFunction, ObjectLambdaAccessPoint and EC2 resources.
  EC2EIP:
    Type: AWS::EC2::EIP
    Condition: IncludeEIP
    Properties:
      Domain: vpc

  Lambda:
    Type: AWS::Serverless::Application
    Condition: IncludeLambda
    Properties:
      Location: ./lambda.yaml
      Tags:
        Name: !Sub ${AWS::StackName}-ec2
      TimeoutInMinutes: 5
      Parameters:
        ParentStackName: !Ref AWS::StackName
        CreateEC2: !Ref CreateEC2
        EC2EIPPublicIP: 
          !If
            - IncludeEIP
            - !GetAtt EC2EIP.PublicIp
            - !Ref AWS::NoValue
        HostName: !Ref HostName
        BucketName: !Ref Bucket
        Shibboleth: !Ref Shibboleth
        LambdaFunctionPayload: !Ref LambdaFunctionPayload
        EnableCloudWatchMonitoring: !Ref EnableCloudWatchMonitoring

  BucketUser:
    Type: AWS::Serverless::Application
    Condition: IncludeBucketUser
    Properties:
      Location: ./bucket-user.yaml
      Tags:
        Name: !Sub ${AWS::StackName}-ec2
      TimeoutInMinutes: 5
      Parameters:
        S3BucketName: !Ref Bucket
        SupportingAccessPointName: 
          !If
            - IncludeLambda
            - !GetAtt Lambda.Outputs.SupportingAccessPointName
            - !Ref AWS::NoValue
        ObjectLambdaAccessPointName:
          !If
            - IncludeLambda
            - !GetAtt Lambda.Outputs.ObjectLambdaAccessPointName
            - !Ref AWS::NoValue
        LambdaArn:
          !If
            - IncludeLambda
            - !GetAtt Lambda.Outputs.LambdaArn
            - !Ref AWS::NoValue

  EC2:
    Type: AWS::Serverless::Application
    Condition: IncludeEC2
    DependsOn: BucketUser
    Properties:
      Location: ./ec2.yaml
      Tags:
        Name: !Sub ${AWS::StackName}-ec2
      TimeoutInMinutes: 30
      Parameters:
        S3BucketName: !Ref Bucket
        ObjectLambdaAccessPointName:
          !If
            - IncludeLambda
            - !GetAtt Lambda.Outputs.ObjectLambdaAccessPointName
            - !Ref AWS::NoValue
        HostName: 
          !If 
            - IncludeEIP
            - !GetAtt EC2EIP.PublicIp
            - !If [ CustomHostName, !Ref HostName, !Ref AWS::NoValue ]
        Shibboleth: !Ref Shibboleth
        SecretArn: !GetAtt BucketUser.Outputs.SecretArn
        S3ManagedPolicyArn: !GetAtt BucketUser.Outputs.S3ManagedPolicyArn

  EC2EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: IncludeEIP
    Properties:
      AllocationId: !GetAtt EC2EIP.AllocationId
      InstanceId: !GetAtt EC2.Outputs.InstanceId


Outputs:

  AssetBucketName:
    Description: The name of the assets bucket
    Value: !Ref Bucket

  HostName:
    Description: The public ip the lambda function has been told about through an evironment variable.
    Value: 
      !If
        - IncludeEIP
        - !GetAtt EC2EIP.PublicIp
        - !If 
            - CustomHostName
            - !Ref HostName
            - !If 
                - IncludeEIP
                - !GetAtt EC2EIP.PublicIp
                - !If 
                    - IncludeEC2
                    - "lookup"
                    - "local-ol"

