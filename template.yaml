AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Create a simple aip gateway that services access to s3 objects with lambda serving an s3 proxy mechanism

Parameters:

  EnableCloudWatchMonitoring:
    Type: String
    Description: >
      Flag to enable CloudWatch request metrics from S3 Object Lambda. This also creates CloudWatch alarms
      to monitor the request metrics.
    Default: false
    AllowedValues: [ true, false ]

  CreateEC2:
    Type: String
    Description: Indicate if an ec2 instance is to be created to act as an apache proxying server to the olap
    Default: false
    AllowedValues: [ true, false ]

  Shibboleth:
    Type: String
    Description: >
      Indicates if the object lambda will require that requests for s3 content include header or token info that proves a successful BU login.
    Default: false
    AllowedValues: [ true, false ]

  HostName:
    Type: String
    Description: >
      An apache client that wants to proxy to the olap will have a virtual host configuration with a ServerName set to this domain name or ip address.
      If the ec2 instance is being created, then its elastic IP will substitute for this value. If not, then you are running an apache host locally 
      and have set this value as a localhost mapping in your hosts file.
    Default: empty

  LambdaFunctionPayload:
    Type: String
    Default: ""
    Description: An optional static payload that provides supplemental data to the Lambda function used to transform objects.

Conditions:
  IncludeEC2:
    !Equals [!Ref CreateEC2, true]
  DefaultHost:
    !Equals [!Ref HostName, empty]
  CustomHostName:
    !Not [Condition: DefaultHost]
  IncludeEIP:
    !And [Condition: IncludeEC2, Condition: DefaultHost]

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-assets
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-assets
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    DeletionPolicy: Delete

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: '*'
            Effect: Allow
            Resource:
            - !GetAtt Bucket.Arn
            - !Sub
              - '${bucketARN}/*'
              - bucketARN: !GetAtt Bucket.Arn
            Principal:
              AWS: '*'
            Condition:
              StringEquals:
                's3:DataAccessPointAccount': !Sub ${AWS::AccountId}

  # Using an EIP for the public addressing of the ec2 instead of simply using the PublicDnsName of the ec2 to avoid
  # a circular reference between LambdaFunction, ObjectLambdaAccessPoint and EC2 resources.
  EC2EIP:
    Type: AWS::EC2::EIP
    Condition: IncludeEIP
    Properties:
      Domain: vpc

  LambdaLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-s3-proxy
      RetentionInDays: 90

  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-s3-proxy-dependencies
      Description: !Sub Dependency layer for lambda function ${AWS::StackName}-s3-proxy
      ContentUri: dependencies/
      CompatibleRuntimes:
        - nodejs14.x
        - nodejs16.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-s3-proxy
      Description: Receives https originated requests for s3 content and conditionally returns after applying authorization logic.
      Runtime: nodejs16.x
      Architectures: [ x86_64 ]
      CodeUri: ./
      Handler: src/Handler.GetAsset
      Layers:
        - !Ref DependencyLayer
      Timeout: 60
      Environment:
        Variables:
          S3_REGION: !Ref AWS::Region
          S3_BUCKET: !Ref Bucket
          SHIBBOLETH: !Ref Shibboleth
          HOST_NAME: 
            !If 
              - CustomHostName
              - !Ref HostName
              - !If 
                  - IncludeEIP
                  - !GetAtt EC2EIP.PublicIp
                  - !If 
                      - IncludeEC2
                      - "lookup"
                      - "local-ol"
              # - !GetAtt EC2.Outputs.PublicDnsName
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref Bucket
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - logs:*
              Resource: 
                - !GetAtt LambdaLogsGroup.Arn
            - Effect: Allow
              Action: 
                s3-object-lambda:WriteGetObjectResponse
              Resource:
                '*'

  SupportingAccessPoint:
    Type: AWS::S3::AccessPoint
    Properties:
      Bucket: !Ref Bucket
      Name: !Sub ${AWS::StackName}-ap

  ObjectLambdaAccessPoint:
    Type: AWS::S3ObjectLambda::AccessPoint
    Properties: 
      Name: !Sub ${AWS::StackName}-olap
      ObjectLambdaConfiguration: 
        AllowedFeatures:
          - GetObject-Range
          - GetObject-PartNumber
          - HeadObject-Range
          - HeadObject-PartNumber
        CloudWatchMetricsEnabled: !Ref EnableCloudWatchMonitoring
        SupportingAccessPoint: !GetAtt SupportingAccessPoint.Arn
        TransformationConfigurations: 
          - Actions: 
              - GetObject
            ContentTransformation: 
              AwsLambda:
                FunctionArn: !GetAtt LambdaFunction.Arn
                FunctionPayload: !Ref LambdaFunctionPayload

  EC2:
    Type: AWS::Serverless::Application
    Condition: IncludeEC2
    Properties:
      Location: ./ec2.yaml
      Tags:
        Name: !Sub ${AWS::StackName}-ec2
      TimeoutInMinutes: 30
      Parameters:
        S3BucketName: !Ref Bucket
        SupportingAccessPointName: !Ref SupportingAccessPoint
        ObjectLambdaAccessPointName: !Ref ObjectLambdaAccessPoint
        HostName: 
          !If 
            - IncludeEIP
            - !GetAtt EC2EIP.PublicIp
            - !If [ CustomHostName, !Ref HostName, !Ref AWS::NoValue ]
        LambdaArn: !GetAtt LambdaFunction.Arn
        Shibboleth: !Ref Shibboleth

  EC2EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: IncludeEIP
    Properties:
      AllocationId: !GetAtt EC2EIP.AllocationId
      InstanceId: !GetAtt EC2.Outputs.InstanceId

Outputs:

  AssetBucketName:
    Description: The name of the assets bucket
    Value: !Ref Bucket

  HostName:
    Description: The public ip the lambda function has been told about through an evironment variable.
    Value: 
      !If
        - IncludeEIP
        - !GetAtt EC2EIP.PublicIp
        - !If 
            - CustomHostName
            - !Ref HostName
            - !If 
                - IncludeEIP
                - !GetAtt EC2EIP.PublicIp
                - !If 
                    - IncludeEC2
                    - "lookup"
                    - "local-ol"

